@page "/activities"
@implements IDisposable
@inject HttpClient Http
@inject ApiSettings Settings
@using System.Timers
@using LiteBulb.Common.DataModel
@using LiteBulb.RunLog.Models

<h3>Activities</h3>
<p>A list of all activities in the system</p>

@if (activities == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Athlete Name</th>
				<th>Type</th>
				<th>Status</th>
				<th>Description</th>
				<th>Units</th>
				<th>Positions</th>
				<th>Started</th>
				<th>Completed</th>
				<th><span class="invisible">View</span></th>
				<th><span class="invisible">Edit</span></th>
				<th><span class="invisible">Delete</span></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var activity in activities)
			{
				<tr>
					<td>@activity.Id.ToString()</td>
					<td>@activity.RunnerName</td>
					<td>@activity.Type</td>
					<td>@activity.Status.ToString()</td>
					<td>@activity.Description</td>
					<td>@activity.Units</td>
					<td>@activity?.PositionCount</td>
					<td>@activity.StartedAt</td>
					<td>@activity.CompletedAt</td>
					<td><a class="btn btn-primary" href="/activities/@activity.Id">View</a></td>
					<td><a class="btn btn-primary" href="/activities/@activity.Id/edit">Edit</a></td>
					<td><a class="btn btn-primary" href="/activities/@activity.Id/delete">Delete</a></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private IReadOnlyCollection<Activity> activities;

	private Timer timer;
	private const int timerInterval = 3000;
	void IDisposable.Dispose() => timer?.Dispose();

	protected override async Task OnInitializedAsync()
	{
		activities = await GetActivities();

		//TODO: get rid of timer on this page
		StartTimer();
	}

	private async Task<IReadOnlyCollection<Activity>> GetActivities(int offset = 0, int limit = 10)
	{
		var pagedResult = await Http.GetFromJsonAsync<PagedResult<Activity>>(Settings.ActivitiesRequestUri + $"/{offset},{limit}");
		return pagedResult.Data;
	}

	//TODO: get rid of timer
	private void StartTimer()
	{
		timer = new Timer(timerInterval);
		timer.Elapsed += TimerElapsedHandler;
		timer.Start();
		Console.WriteLine("Timer Started (List Activities).");
	}

	private async void TimerElapsedHandler(object source, ElapsedEventArgs args)
	{
		activities = await GetActivities();

		// Note that the following line is necessary because otherwise
		// Blazor would not recognize the state change and not refresh the UI
		await InvokeAsync(() => { StateHasChanged(); });

		Console.WriteLine("Timer Elapsed (List Activities).");
	}
}