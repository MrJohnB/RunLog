@page "/activities"
@implements IDisposable
@inject HttpClient Http
@inject ApiSettings Settings
@using System.Timers
@using LiteBulb.Common.DataModel
@using LiteBulb.RunLog.Dtos
@using LiteBulb.RunLog.Dtos.Extensions
@using LiteBulb.RunLog.Web.ViewModels

<h3>Activities</h3>
<p>A list of all activities in the system</p>

<div class="action-buttons-right">
	<a class="btn btn-primary action-button" href="/activities/add" title="Add New Activity"><span class="oi oi-plus"></span><span class="d-none">Add Activity</span></a>
</div>

@if (activities == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="table-responsive">
		<table class="table table-sm table-hover">
			<thead>
				<tr>
					<th>Id</th>
					<th>Athlete Name</th>
					<th>Type</th>
					<th>Status</th>
					<th>Description</th>
					<th>Units</th>
					<th>Positions</th>
					<th>Start Time</th>
					<th>End Time</th>
					<th><span class="d-none">Edit</span></th>
					<th><span class="d-none">Delete</span></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var activity in activities)
				{
					<tr>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.Id</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.AthleteName</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.Type</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.Status.ToString()</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.ShortDescription()</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.Units</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity?.PositionCount</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.StartedAt</a></td>
						<td><a class="clickable" href="/activities/@activity.Id">@activity.CompletedAt</a></td>
						<td><a class="btn btn-primary oi oi-pencil" href="/activities/@activity.Id/edit" title="Edit Activity"><span class="d-none">Edit</span></a></td>
						<td><a class="btn btn-primary oi oi-trash" href="/activities/@activity.Id/delete" title="Delete Activity"><span class="d-none">Delete</span></a></td>
					</tr>
				}
			</tbody>
			<tfoot>
				<tr>
					<th>Id</th>
					<th>Athlete Name</th>
					<th>Type</th>
					<th>Status</th>
					<th>Description</th>
					<th>Units</th>
					<th>Positions</th>
					<th>Started</th>
					<th>Completed</th>
					<th><span class="d-none">Edit</span></th>
					<th><span class="d-none">Delete</span></th>
				</tr>
			</tfoot>
		</table>
	</div>
	<Pagination OnClickPaging="GetPagedResultHandler" Paging="Paging" />
}

@code {
	private PaginationViewModel Paging = new PaginationViewModel();
	private IReadOnlyCollection<ActivityDto> activities;

	private Timer timer;
	private const int timerInterval = 5000;
	void IDisposable.Dispose() => timer?.Dispose();

	protected override async Task OnInitializedAsync()
	{
		await GetPagedResultHandler(EventArgs.Empty);

		//TODO: get rid of timer on this page
		StartTimer();
	}

	private async Task<PagedResult<ActivityDto>> GetPagedResultAsync(int pageOffset = 0, int pageSize = 10)
	{
		return await Http.GetFromJsonAsync<PagedResult<ActivityDto>>(Settings.ActivitiesRequestUri + $"/{pageOffset},{pageSize}");
	}

	private async Task GetPagedResultHandler(EventArgs args)
	{
		var pagedResult = await GetPagedResultAsync(Paging.PageOffset, Paging.PageSize);
		activities = pagedResult.Data;
		Pagination.UpdatePagingProperties(pagedResult.Total, Paging);
	}

	//TODO: get rid of timer
	private void StartTimer()
	{
		timer = new Timer(timerInterval);
		timer.Elapsed += TimerElapsedHandler;
		timer.Start();
		Console.WriteLine("Timer Started (List Activities).");
	}

	private async void TimerElapsedHandler(object source, ElapsedEventArgs args)
	{
		await GetPagedResultHandler(EventArgs.Empty);

		// Note that the following line is necessary because otherwise
		// Blazor would not recognize the state change and not refresh the UI
		await InvokeAsync(() => { StateHasChanged(); });

		Console.WriteLine("Timer Elapsed (List Activities).");
	}
}