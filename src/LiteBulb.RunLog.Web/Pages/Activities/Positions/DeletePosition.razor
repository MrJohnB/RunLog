@page "/activities/{ActivityId}/positions/{PositionId}/delete"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ApiSettings Settings
@using LiteBulb.RunLog.Dtos

<h3>Delete Position</h3>
<p>Are you sure you want to delete this position?</p>

<div class="action-buttons">
	<button type="button" @onclick="HandleCancel" class="btn btn-primary action-button" title="Cancel and Go Back"><span class="oi oi-caret-left"></span><span class="d-none">Cancel</span></button>
</div>

<EditForm Model="@position" OnSubmit="HandleDeleteAsync">

	<div class="form-group">
		<label for="positionId">Position Id</label>
		<InputNumber id="positionId" @bind-Value="@position.Id" class="form-control" readonly="true" />
	</div>

	<PositionForm Position="@position" ReadOnly="true" />

	<button type="submit" class="btn btn-primary" title="Submit the Fields">Delete</button>
</EditForm>

@code {
	[Parameter]
	public string ActivityId { get; set; }

	[Parameter]
	public string PositionId { get; set; }

	private PositionDto position = new PositionDto();

	protected override async Task OnInitializedAsync()
	{
		//TODO: Check to see if ActivityId is valid and exists in the database

		position = await Http.GetFromJsonAsync<PositionDto>($"{Settings.PositionsRequestUri}/{PositionId}");

		if (position == null)
		{
			Console.WriteLine($"Error while sending GET request to API for Position object with id: '{PositionId}'.");
			return;
		}

		Console.WriteLine($"Position object with id: '{PositionId}' was found successfully.");
	}

	private async Task HandleDeleteAsync()
	{
		var responseMessage = await Http.DeleteAsync($"{Settings.PositionsRequestUri}/{position.Id}");

		if (!responseMessage.IsSuccessStatusCode)
		{
			Console.WriteLine($"Error while sending DELETE request to API for Position object.  Position object with id: '{position.Id}' was not found.");
			return;
		}

		Console.WriteLine($"Position object with id: '{position.Id}' was deleted successfully.");
		//TODO: check if Activity with that id exists and display activities list if it doesn't
		Navigation.NavigateTo($"/activities/{position.ActivityId}");
	}

	private void HandleCancel()
	{
		//if (string.IsNullOrWhiteSpace(ActivityId))
		//	Navigation.NavigateTo($"/activities");
		//else
		Navigation.NavigateTo($"/activities/{ActivityId}/positions/{PositionId}");

		//TODO: check if Position with that id exists and display Activity if it doesn't
	}
}
