@page "/activities/positions"
@implements IDisposable
@inject HttpClient Http
@inject ApiSettings Settings
@using LiteBulb.RunLog.Web.Shared
@using System.Timers
@using LiteBulb.Common.DataModel
@using LiteBulb.RunLog.Dtos
@using LiteBulb.RunLog.Web.ViewModels

<h3>Positions</h3>
<p>A list of all positions in the system</p>

<PositionList Positions="@positions" />
<Pagination OnClickPaging="GetPagedResultHandler" Paging="Paging" />

@code {
	private PaginationViewModel Paging = new PaginationViewModel();
	private IReadOnlyCollection<PositionDto> positions;

	private Timer timer;
	private const int timerInterval = 4000;
	void IDisposable.Dispose() => timer?.Dispose();

	protected override async Task OnInitializedAsync()
	{
		await GetPagedResultHandler(EventArgs.Empty);

		//TODO: get rid of timer
		StartTimer();
	}

	private async Task<PagedResult<PositionDto>> GetPagedResultAsync(int pageIndex = 0, int pageSize = 20)
	{
		return await Http.GetFromJsonAsync<PagedResult<PositionDto>>(Settings.PositionsRequestUri + $"/{pageIndex},{pageSize}");
	}

	private async Task GetPagedResultHandler(EventArgs args)
	{
		var pagedResult = await GetPagedResultAsync(Paging.PageIndex, Paging.PageSize);

		positions = pagedResult.Data;
		Paging.TotalEntityCount = pagedResult.Total;
		Paging.CurrentEntityCount = Paging.TotalEntityCount - Paging.PageIndex;
		Paging.CurrentEntityIndex = (Paging.CurrentEntityCount - Paging.PageSize) > 0 ? Paging.CurrentEntityCount - Paging.PageSize + 1 : 1;
	}

	//TODO: get rid of timer
	private void StartTimer()
	{
		timer = new Timer(timerInterval);
		timer.Elapsed += TimerElapsedHandler;
		timer.Start();
		Console.WriteLine("Timer Started (List Positions).");
	}

	private async void TimerElapsedHandler(object source, ElapsedEventArgs e)
	{
		await GetPagedResultHandler(EventArgs.Empty);

		// Note that the following line is necessary because otherwise
		// Blazor would not recognize the state change and not refresh the UI
		await InvokeAsync(() => { StateHasChanged(); });

		Console.WriteLine("Timer Elapsed (List Positions).");
	}
}