@page "/activities/{ActivityId}"
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ApiSettings Settings
@inject IJSRuntime JSRuntime;
@using System.Timers;
@using LiteBulb.RunLog.Dtos
@using LiteBulb.RunLog.Web.ViewModels

<h3>View Activity</h3>
<p>Show some cool activity details here</p>

<p>
	<button type="button" @onclick="HandleAddPosition" class="btn btn-primary">Add Position</button>
	<button type="button" @onclick="HandleAddCurrentGpsPosition" class="btn btn-primary">Add Current GPS Position</button>
	<button type="button" @onclick="HandleStartButton" class="btn btn-primary" disabled="@startButtonDisabled">Start</button>
	<button type="button" @onclick="HandleStopButton" class="btn btn-primary" disabled="@stopButtonDisabled">Stop</button>
</p>

<PositionList Positions="@GetPositionsPage(Paging.PageOffset, Paging.PageSize)" />
<Pagination OnClickPaging="GetPagedResultHandler" Paging="Paging" />

<p>
	<button type="button" @onclick="HandleBack" class="btn btn-primary">Back</button>
</p>

@code {
	[Parameter]
	public string ActivityId { get; set; }

	private static PaginationViewModel Paging = new PaginationViewModel();

	private Timer timer; //TODO: get rid of timer
	private const int timerInterval = 3000;
	void IDisposable.Dispose() => timer?.Dispose();

	private bool started = false;
	private bool startButtonDisabled => started;
	private bool stopButtonDisabled => !started;

	// For JSInvokable static callback method
	private static Action stateHasChanged;
	private static ActivityDto activity = new ActivityDto();
	private static HttpClient http;
	private static ApiSettings settings;

	protected override async Task OnInitializedAsync()
	{
		started = false;

		if (!int.TryParse(ActivityId, out int result))
		{
			Console.WriteLine($"Error while trying to parse Activity Id passed in.  The value: '{ActivityId}' is not a valid integer.");
			Navigation.NavigateTo($"/activities");
			return;
		}

		activity = await Http.GetFromJsonAsync<ActivityDto>($"{Settings.ActivitiesRequestUri}/{ActivityId}");

		if (activity == null)
		{
			Console.WriteLine($"Error while sending GET request to API for Activity object with id: '{ActivityId}'.");
			return;
		}

		Console.WriteLine($"Activity object with id: '{ActivityId}' was found successfully.");

		GetPagedResultHandler(EventArgs.Empty);

		// For JSInvokable static callback method
		stateHasChanged = () => this.StateHasChanged();
		http = Http;
		settings = Settings;
	}

	private IEnumerable<PositionDto> GetPositionsPage(int pageOffset = 0, int pageSize = 10)
	{
		int endIndex = pageOffset + pageSize;

		for (int i = pageOffset; i < endIndex; i++)
		{
			if (i >= activity.Positions.Count)
				break;

			yield return activity.Positions[i];
		}
	}

	private static void GetPagedResultHandler(EventArgs args)
	{
		Paging.TotalEntityCount = activity.Positions.Count;
		Paging.CurrentEntityCount = Paging.TotalEntityCount - Paging.PageOffset;

		if (Paging.TotalEntityCount == 0)
			Paging.CurrentEntityIndex = 0;
		else
			Paging.CurrentEntityIndex = (Paging.CurrentEntityCount - Paging.PageSize) > 0 ? Paging.CurrentEntityCount - Paging.PageSize + 1 : 1;
	}

	private async Task HandleAddCurrentGpsPosition()
	{
		//TODO: try replacing Void with the return type of this javascript function
		await JSRuntime.InvokeVoidAsync("getPosition", "LiteBulb.RunLog.Web", "GetPositionCallback");
	}

	[JSInvokable("GetPositionCallback")]
	public static async Task PositionCallback(PositionViewModel positionViewModel)
	{
		PositionDto position = positionViewModel;
		position.ActivityId = activity.Id ??= 0; //TODO: throw exception?

		var responseMessage = await http.PostAsJsonAsync<PositionDto>(settings.PositionsRequestUri, position);

		if (!responseMessage.IsSuccessStatusCode)
		{
			Console.WriteLine($"Error while sending POST request to API for Position object with Activity id: '{activity.Id}'.  In GetPositionCallback JSInvokable method.  StatusCode: {responseMessage.StatusCode}.");
			return;
		}

		var createdPosition = await responseMessage.Content.ReadFromJsonAsync<PositionDto>();

		Console.WriteLine($"Position object with id: '{createdPosition.Id}' was created successfully.");

		activity.Positions.Insert(0, createdPosition);
		GetPagedResultHandler(EventArgs.Empty);
		stateHasChanged();
	}

	private void HandleStartButton()
	{
		InitializeTimer();
		started = true;
		timer.Start();
		Console.WriteLine("Timer started (View Activity).");
	}

	private void HandleStopButton()
	{
		started = false;
		timer.Stop();
		Console.WriteLine("Timer stopped (View Activity).");
	}

	private void InitializeTimer()
	{
		if (timer != null)
			return;

		timer = new Timer(timerInterval);
		timer.Elapsed += TimerElapsedHandler;
		Console.WriteLine("Timer initialized (View Activity).");
	}

	private async void TimerElapsedHandler(object source, ElapsedEventArgs args)
	{
		await JSRuntime.InvokeVoidAsync("getPosition", "LiteBulb.RunLog.Web", "GetPositionCallback");
	}

	// Not used right now
	private async Task HandleStartWatchGpsPosition()
	{
		started = true;
		await JSRuntime.InvokeVoidAsync("startWatchPosition", "LiteBulb.RunLog.Web", "GetPositionCallback");
	}

	// Not used right now
	private async Task HandleStopWatchGpsPosition()
	{
		started = false;
		await JSRuntime.InvokeVoidAsync("stopWatchPosition", "LiteBulb.RunLog.Web", "StopWatchPositionCallback");
	}

	private void HandleAddPosition()
	{
		Navigation.NavigateTo($"/activities/{ActivityId}/positions/add");
	}

	private void HandleBack()
	{
		Navigation.NavigateTo("/activities");
	}
}
